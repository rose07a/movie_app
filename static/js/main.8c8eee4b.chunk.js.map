{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","potato","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUA+BA,SAASA,EAAT,GAAqC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC3B,OACG,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,iBAIzD,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACG,0BAAMF,UAAU,eAAeE,EAA/B,KAaQC,MAhDf,YAAmD,IAAlCP,EAAiC,EAAjCA,OAAQG,EAAyB,EAAzBA,MAAOK,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACpC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,iBACV,kBAACL,EAAD,CAAaC,OAAUA,EAAQC,IAAKE,KAEzC,yBAAKC,UAAU,iBACV,gCAAMD,EAAN,KACA,yBAAKC,UAAU,gBACTI,EAAOE,KAAK,SAACJ,EAAMK,GAAP,OAAiB,kBAAEN,EAAF,CAAaC,MAAOA,EAAOM,IAAKD,QAEnE,uBAAGP,UAAU,kBACPK,MCmCRI,E,2MA7CbC,MAAQ,G,EAQVC,cAAgB,WAUd,OATe,EAAKD,MAAME,OAAON,KAAK,SAAAO,GAEpC,OADAC,QAAQC,IAAIF,GACL,kBAAE,EAAF,CACEd,MAAOc,EAAMG,cACbpB,OAAQiB,EAAMI,mBACdT,IAAKK,EAAMK,GACXd,OAAQS,EAAMT,OACdC,SAAUQ,EAAMR,e,EAK7Bc,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACNT,EADM,OAEZ,EAAKU,SAAS,CACZV,WAHU,2C,EAObS,SAAW,WACP,OAAOE,MAAM,iEACZC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAO,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,mFA3B7BC,KAAKX,e,+BA8BI,IACCP,EAAWkB,KAAKpB,MAAhBE,OACR,OACE,yBAAKZ,UAAaY,EAAS,MAAQ,eAC/BA,EAASkB,KAAKnB,gBAAkB,e,GAzCxBoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.8c8eee4b.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport './Movie.css';\n\nfunction Movie ({poster, title, genres, synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie_Columns\">\n                 <MoviePoster poster = {poster} alt={title}/>\n            </div>\n            <div className=\"Movie_Columns\">\n                 <h1> {title} </h1>\n                 <div className=\"Movie_Genres\">\n                      {genres.map( (genre,index) => < MovieGenre genre={genre} key={index} />)}\n                 </div>\n                 <p className=\"Movie_Synopsis\">\n                      {synopsis}\n                 </p>\n            </div>\n        \n        </div>\n    )\n}\n\nMovie.propTypes = {\n        title: propTypes.string.isRequired,\n        poster: propTypes.string.isRequired,\n        genres: propTypes.array.isRequired,\n        synopsis: propTypes.string.isRequired\n}\n\nfunction MoviePoster ({poster, alt}){\n    return (\n       <img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return(\n       <span className=\"Movie_Genre\">{genre} </span>\n    )\n}\n\nMoviePoster.propTypes = {\n    poster: propTypes.string.isRequired,\n    alt: propTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genres: propTypes.array.isRequired\n}\n\nexport default Movie;","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component{\n\n  state = {\n\n  }\n\n  componentDidMount(){\n  this._getMovies();\n}\n\n_renderMovies = () => {\n  const movies = this.state.movies.map( movie => {\n    console.log(movie)\n    return < Movie \n             title={movie.title_english}\n             poster={movie.medium_cover_image}\n             key={movie.id}\n             genres={movie.genres}\n             synopsis={movie.synopsis}/>\n  })\n  return movies\n}\n\n_getMovies = async () => {\n const movies =  await this._callApi()\n this.setState({\n   movies\n })\n}\n\n_callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(potato => potato.json())\n    .then(json => json.data.movies)\n    .catch( err => console.log(err))\n}\n\n  render(){\n    const { movies } = this.state;\n    return (\n      <div className= { movies ? \"App\" : \"App-loading\" } >\n        { movies ? this._renderMovies() : 'Loading'} \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}